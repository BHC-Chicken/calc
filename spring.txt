일반 자바 실행파일 : .Jar
웹 애플리케이션 실행파일 : .War

- pom.xml : 프로젝트의 의존성을 관리하기위해 사용함. (Maven)
	- 의존성 : 프로젝트가 구동되기 위해 필요한 일종의 라이브러리 / 프레임워크
	dependencies 에 추가.
alt+insert 로 의존성 추가 가능
	- tomcat-embed-jasper // 버전 9.0.45 추가 후 변경사항 적용.

- src.main.java : 프로젝트의 java 관련된 모든 것을 포함.
- src.main.resources : 
	- static : 프로젝트에서 사용하는 정적 리소스 (이미지, 영상, HTML 파일 등 ) 을 포함한다. (루트(/)에 맵핑되어있음.)
	- application.properties : Spring Boot 관련 설정을 담은 파일

- src.main.webapp : (동적) JSP 파일을 포함하기 위해 사용하는 폴더. (루트(/)에 맵핑되어있음.)
	- WEB-INF : 외부에서 주소로 바로 접근하지 못하게 하기 위해 사용하는 폴더. (JSP 파일을 위해 사용함.)
		- views : MVC 의 V(View)에 사용할 파일을 담기 위해 사용한다. JSP 파일을 담고있음.

- 절대로 JSP 확장자를 노출시키지 않는다. = Java 로 웹개발 한 사실을 알리지 않아야함.

- org.json : json 과 관련된 라이브러리

com.example.calc 밑에 controllers 라는 패키지 생성후 그 패키지 안에 파일을 만들어야 CalcApplication 이 인식함.

@RequestMapping  // 요청에 대해 어떤 Controller, 어떤 메소드가 처리할지를 맵핑하기 위한 어노테이션

@Controller : 당 클래스가 컨트롤러임을 알림.
@RestController : 당 클래스가 컨트롤러 이면서 모든 맵핑된 메서드가 ResponseBody 어노테이션을 가지도록 한다.
@RequestMapping(value, method, produces) : 당 클래스/메서드를 value 값에 응하는 주소에 연결함.
	- method : 해당 맵핑을 method 값에 응하는 것으로 제한함. (RequestMethod)
	- produces : 해당 맵핑이 반환하는 응답 (Response)의 Content-Type 을 지정함. (MediaType)
	- 단, 클래스에 RequestMapping 이 적용된 경우, 이는 응답으로 사용할 수 없으며
	당 클래스가 가지는 메서드의 RequestMapping 에 대한 value 값의 prefix(접두어)로 작용함.
@ResponseBody : 당 메서드가 외부의 JSP 파일 등으로 연결되지 않고 응답 값이 종결됨을 의미함.
	- ResponseBody 가 없는 메서드가 문자열(String)을 반환할 경우 이에 응하는 JSP 파일을 찾으려 함.
	이 때 경로는 'webapp' 에서 시작함.
	- ResponseBody 가 있는 메서드가 문자열(String)을 반환할 경우 그냥 (클라이언트)화면에 출력함.

# 의존성
- tomcat-embed-jasper : 컨트롤러의 ResponseBody 가 아닌 메서드가 문자열을 반환할 때 연결할 JSP 파일을 화면에 표시할 수 있게 해준다.

@RequestParam(name, defaultValue) : 클라이언트의 요청에서 데이터를 가져온다. 이때 name 값을 키로하며 이가 주어지지 않았을 때 기본으로 사용할 값을 defaultValue 에 정의한다.

